Deletion in Doubly Linked List
easy
Problem Statement
Given a Doubly linked list consisting of N nodes and given a number K. The task is to delete the Kth node from the end of the linked list.
Input
User Task:
Since this will be a functional problem, you don't have to take input. You just have to complete the function deleteElement() that takes head node and the position K as parameter.

Constraints:
1 <=K<=N<= 1000
1 <=value<= 1000
Output
Return the head of the modified Doubly linked list
Example
Input:
5 3
1 2 3 4 5

Output:
1 2 4 5

Explanation:
After deleting 3rd node from the end of the linked list, 3 will be deleted and the list will become 1, 2, 4, 5.

===================================================================================

/*
// information about the class Nodeclass Node {
    Node next;
    int val;

    Node(int val) {
        this.val = val;
        next = null;
    }
}
*/
public static Node deleteElement(Node head,int k) {

    int count=0;
    Node temp = head;
    while(temp!=null){
        count++;
        temp = temp.next;
    }

    int n = count-k;

    temp = head;
    for(int i=1; i<n; i++){
        temp=temp.next;
    }

    if(n == 0){
        head = head.next;
        head.prev = null;
        return head;
    }

    Node pre = temp;
    Node pos = null;
    if(temp.next!=null) {
        pos = temp.next.next;
    }

    pre.next = pos;
    if(temp.next!=null) {
        pos.prev = pre;
    }

    return head;
}
