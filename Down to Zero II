Down to Zero II
hard
Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
You are given Q queries. Each query consists of a single number N. You can perform any of the 2 operations on N in each move:
1: If we take 2 integers a and b where N = a x b(a≠1, b≠1), then we can change N = max(a, b)
2: Decrease the value of N by 1.
Determine the minimum number of moves required to reduce the value of N to 0.
Input
The first line contains the integer Q.
The next Q lines each contain an integer, N.

Constraints
1 ≤ Q ≤ 103
1 ≤ N ≤ 106
Output
Output Q lines. Each line containing the minimum number of moves required to reduce the value of N to 0.
Example
Sample Input
2
3
4
Sample Output
3
3
Explanation
For test case 1, We only have one option that gives the minimum number of moves.
Follow 3- >2- >1- >0. Hence, moves.
For the case 2, we can either go 4- >3- >2- >1- >0 or 4- >2- >1- >0. The 2nd option is more optimal. Hence, 3 moves.

===================================================================================

#include <bits/stdc++.h> // header file includes every Standard library
using namespace std;
int dis[1000002];
int main() {
	    int n,que;
    cin>>que;
    while (que--)
    {
        cin>>n;
        if(n == 0)
        {
            cout<<0<<endl;
            continue;
        }
        queue<int> q;
        q.push(n);
        dis[n] = 1;
        while (!q.empty())
        {
            int now = q.front();
            q.pop();
            if(dis[now-1] == 0)
            {
                dis[now-1] = dis[now]+1;
                if(now -1 == 0)
                    break;
                q.push(now-1);
            }
            for(int i = 2; i*i <= now; i++)
            {
                if(now%i == 0)
                {
                    int fac = max(i, now/i);
                    if(dis[fac] == 0)
                    {
                        dis[fac] = dis[now]+1;
                        q.push(fac);
                    }
                }
            }
        }
        cout<<dis[0]-1<<endl;
        memset(dis,0,sizeof(dis));
    }
    return 0;
}
