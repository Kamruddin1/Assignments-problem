Longest valid Parenthesis
easy
asked in interviews by 1 company
Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Given a string S consisting of opening and closing parenthesis '(' and ')'. Find length of the longest valid parenthesis substring.
Input
Each test case have one line string S of character '(' and ')' of length N.

Constraints:
1 <= N <= 10^5
Output
Print the length of the longest valid parenthesis substring.
Example
Input
((()

Output
2

Input
)()())

Output
4

===================================================================================

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
			Scanner scan = new Scanner(System.in);
			char[] arr = scan.nextLine().toCharArray();
			int n = arr.length;
			System.out.println(longestValidParenthesis(arr, n));
	}
	private static int longestValidParenthesis(char[] arr, int n){

		int result = 0;
		Stack<Integer> s = new Stack<>();

		for(int i = 0; i < n; i++){
			if(arr[i] == '(') {
				s.push(i);
			}
			else{

				if(!s.isEmpty()) s.pop();

				if(!s.isEmpty()) result = Math.max(i - s.peek(), result);
				else s.push(i);
			}
		}
		return result;
	}
}
