Make The String Great
hard
hint
Hint

Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Given a string s of lower and upper case English letters.

A good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:

0 <= i <= s. length - 2
s[i] is a lower- case letter and s[i + 1] is the same letter but in upper- case or vice- versa.
To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.

Return the string after making it good. The answer is guaranteed to be unique under the given constraints.

Notice that an empty string is also good.
Input
There is an string s is given in first line of input.
1 <= s. length <= 100
s contains only lower and upper case English letters
Output
Return the string after making it good.
The answer is guaranteed to be unique under the given constraints.
Example
Sample Input:
leEeetcode
Sample Output:
leetcode

Explanation: In the first step, either you choose i = 1 or i = 2, both will result "leEeetcode" to be reduced to "leetcode".

===============================================================================

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // String str = "leEeetcode";
        // int n = str.length();

        Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        int n=str.length();

        Stack<Character> myStack = new Stack<>();
        for(int i=0; i<n; i++){
            char x = str.charAt(i);

            if(myStack.isEmpty()){
                myStack.push(x);
            }
            else {
                char y = myStack.peek();
                if(
                    Character.toUpperCase(x) == Character.toUpperCase(y)
                                &&
                    (
                        (Character.isUpperCase(x) && Character.isLowerCase(y))
                                                    ||
                        (Character.isLowerCase(x) && Character.isUpperCase(y))
                    )
                ){
                    myStack.pop();
                }
                else
                {
                    myStack.push(x);
                }
            }
        }

        int m = myStack.size();
        char res[] = new char[m];
        for(int i=m-1; i>=0; i--){
            res[i] = myStack.pop();
        }
            
        System.out.println(res);
            
    }
}
