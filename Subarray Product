Subarray Product
easy
Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Given an array, A of N integers. Find the product of maximum values for every subarray of size K. Print the answer modulo 1000000007.

A subarray is any contiguous sequence of elements in an array.
Input
First line contains two integers N and K, denoting the size of array and the size of subarray respectively.
Next line contains N integers denoting the elements of the array.

1 <= K <= N <= 1000000
1 <= A[i] <= 1000000
Output
Print a single integer denoting the product of maximums for every subarray of size K modulo 1000000007
Example
Sample Input 1:
6 4
1 5 2 3 6 4

Sample Output 1:
180

Explanation:
For subarray [1, 5, 2, 3], maximum = 5
For subarray [5, 2, 3, 6], maximum = 6
For subarray [2, 3, 6, 4], maximum = 6
Therefore, ans = 5*6*6 = 180

=========================================================================

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    static void printMax(int arr[], int N, int k){
        Deque<Integer> Qi = new LinkedList<Integer>();
        int i;
        long res = 1;
        for(i=0;i<k;++i){
            while(!Qi.isEmpty() && arr[i] >= arr[Qi.peekLast()])
            Qi.removeLast();
            Qi.addLast(i);

        }
        for(; i<N; ++i){
            res = (res*arr[Qi.peek()])%1000000007;
            while((!Qi.isEmpty()) && Qi.peek() <=i-k)
            Qi.removeFirst();
            while((!Qi.isEmpty()) && arr[i] >= arr[Qi.peekLast()])
            Qi.removeLast();
            Qi.addLast(i); 
            
        }
        res = (res*arr[Qi.peek()])%1000000007;
        System.out.println(res);
    }
    public static void main (String[] args)throws IOException {
                      // Your code here
                      BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
                      String[] input = new String[2];
                      int n;
                      int k;
                      input = br.readLine().split(" ");
                      n = Integer.parseInt(input[0]);
                      k = Integer.parseInt(input[1]);
                      int a[] = new int[n];
                      String inputLine[] = br.readLine().trim().split(" ");
                      for (int i=0;i<n;i++){
                          a[i]=Integer.parseInt(inputLine[i]);
                      }
                      printMax(a,n,k);
    }
}
