Sum Subarray
medium
Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
You are given an array Arr of N integers. A subarray is good if the sum of elements of that subarray is greater than or equal to K. Print the length of good subarray of minimum length.
Input
First line of input contains N and K.
Second line of input contains N integers representing the elements of the array Arr.

Constraints
1 <= N <= 100000
1 <= Arr[i] <= 100000
1 <= K <= 1000000000000
Output
Print the length of good subarray of minimum length.
Example
Sample input
5 12
2 3 2 5 5

Sample output
3

Explanation :
Subarray from index 3 to 5 has sum 12 and is therefore good and its length(3) is minimum among all possible good subarray.

====================================================================

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework
// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
         Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long K = sc.nextLong();
        int[] Arr = new int[N];
        int add=0;
        for (int i = 0; i < N; i++) {
            Arr[i] = sc.nextInt();
        }
        int minLength =Integer.MAX_VALUE;
        long sum = 0;
        int start = 0;
        for (int i = 0; i < N; i++) {
            sum += Arr[i];
            while (sum >= K) {
                minLength = Math.min(minLength, i - start + 1);
                sum -= Arr[start];
                start++;
            }
        }
        System.out.println(minLength);
    }
}

==========================================================================

// import java.io.*; // for handling input/output
// import java.util.*; // contains Collections framework

// // don't change the name of this class
// // you can add inner classes if needed
// class Main {

    // public static int SubArraysSum(int arr[], int target){
    //     int ans = 0;
    //     HashMap<Integer,Integer> map = new HashMap<>();
    //         map.put(0,1);
    //         int sum = 0;
    //         for(int i=0; i<arr.length; i++){
    //             sum += arr[i];
    //             if(map.containsKey(sum-target)){
    //                 ans +=map.get(sum - target);
    //             }
    //             map.put(sum, map.getOrDefault(sum,0)+1);
    //         }
    //     return ans;
    // }
    // public static void main(String[] args){
    //     Scanner sc = new Scanner(System.in);
    //     long n = sc.nextLong();
    //     int  arr[] = new int[n];
    //     for(int i=0; i<n; i++){
    //         arr[i] = sc.nextInt();
    //     }
    //     long target = sc.nextInt();
    //     System.out.println(SubArraysSum(arr, target));
    
    // }
//}
