Super-Exponentation
medium
hint
Hint

Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Modulo exponentiation is super awesome. But can you still think of a solution to the following problem?
Given three integers {a, b, c}, find the value of abc % 1000000007.
Here ab means a raised to the power b or pow(a, b). Expression evaluates to pow(a, pow(b, c)) % 1000000007.

(Read Euler's Theorem before solving this problem)
Input
The first input line has an integer t: the number of test cases.
After this, there are n lines, each containing three integers a, b and c.


Constraints
1≤ t ≤ 100
0 ≤ a, b, c ≤ 1000000000
Output
For each test case, output the value corresponding to the expression.

===========================================================================================

import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
                      // Your code here
                       Scanner sc= new Scanner(System.in);
		int T=sc.nextInt();
		long m=1000000007;
		for(int i=1;i<=T;i++){
			long a=sc.nextLong();
			long b=sc.nextLong();
			long c=sc.nextLong();
            long bc=fastPower(b,c,m-1);
            // System.out.println(fastPower(b,c,m));
			System.out.println(fastPower(a,bc,m));
		}
	}
	static long fastPower(long a,long b ,long m)
	{	
		long ans=1;
		while(b>0){
			if(b%2!=0){
				ans=(ans*a)%m;

			}
			a=(a*a*1)%m;
			b>>=1;

		}
		return ans;
    }
}
